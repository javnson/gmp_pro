% This file generate a header file

% target_file is target source file and header file name, without suffix.
% fuzzy_mat_name will define the name of source code matrix.
% fuzzy_2d_mat give the souce fuzzy 2D matrix content.


function generate_fuzzy_2d_src(target_file, fuzzy_mat_name, ...
    fuzzy_2d_mat, dim1_mesh, dim2_mesh)

% config setting 
type_name = "ctrl_gt";

header_file = strcat(target_file, ".h");
source_file = strcat(target_file, ".c");

fs = fopen(source_file, "w+");
fh = fopen(header_file, "w+");

%% generate information about the file
info_src = [...
"/**                                                                                      ";...
" * @file fuzzy_2d.c                                                                      ";...
" * @author Auto-generated by GMP MATLAB script                                           ";...
" * @brief Defines the data for a specific fuzzy logic control surface.                   ";...
" * @version 1.0                                                                          ";...
" * @date 2025-08-11                                                                      ";...
" *                                                                                       ";...
" * @copyright Copyright (c) 2024                                                         ";...
" *                                                                                       ";...
" * @details This file contains the pre-calculated look-up table (LUT) data               ";...
" * for a fuzzy logic controller. The data includes the control surface matrix            ";...
" * and the axis vectors for two input variables (Error and Error Rate).                  ";...
" * This file is typically generated automatically and should not be edited manually.     ";...
" * It also provides a specific initialization function for a controller using this data. ";...
" */                                                                                      ";...
"#include <gmp_core.h>                                                                    ";...
"#include <stdint.h>                                                                      ";...
"#include <ctl/component/intrinsic/advance/flc.h> // Use the main FLC header              "];

for i=1:18
    fprintf(fs, "%s\r\n", info_src(i));
end

fprintf(fs, "\r\n");
%% generate fuzzy matrix

fuzzy_mat_size = size(fuzzy_2d_mat);

% create fuzzy matrix
fprintf(fs, "// fuzzy matrix content\r\n");
fprintf(fs, "%s %s_matrix [%d][%d] = {\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1), fuzzy_mat_size(2));

% generate fuzzy matrix content
for i = 1:fuzzy_mat_size(1)
    for j = 1:fuzzy_mat_size(2)
        if(j == 1)
            fprintf(fs, "\t{float2ctrl(%.6f)",fuzzy_2d_mat(i,j));
        else
            fprintf(fs, " ,float2ctrl(%.6f)",fuzzy_2d_mat(i,j));
        end
    end
    fprintf(fs, "},\r\n");
end
fprintf(fs, "};");
fprintf(fs, "\r\n\r\n");

%% generate fuzzy variables

if 0

    % generate fuzzy variables
    fprintf(fs, "// fuzzy variable1 mesh\r\n");
    fprintf(fs, "%s %s_segment1[%d] = \r\n", ...
        type_name, fuzzy_mat_name, fuzzy_mat_size(1));
    for i = 1:fuzzy_mat_size(1)
        if(i == 1)
            fprintf(fs, "\t{float2ctrl(%.6f)", dim1_mesh(i));
        else
            fprintf(fs, " ,float2ctrl(%.6f)", dim1_mesh(i));
        end
    end
    fprintf(fs, "};\r\n\r\n");

    % generate fuzzy variables
    fprintf(fs, "// fuzzy variable2 mesh\r\n");
    fprintf(fs, "%s %s_segment2[%d] = \r\n", ...
        type_name,fuzzy_mat_name, fuzzy_mat_size(2));
    for i = 1:fuzzy_mat_size(2)
        if(i == 1)
            fprintf(fs, "\t{float2ctrl(%.6f)", dim1_mesh(i));
        else
            fprintf(fs, " ,float2ctrl(%.6f)", dim1_mesh(i));
        end
    end
    fprintf(fs, "};\r\n\r\n");

end

%% generate const values

info_src2 = [...
"/**                                                            ";...
" * @brief The number of grid points for the 'Error' input axis.";...
" */                                                            ";...
" * @brief The number of grid points for the 'Error Rate' input axis.";...
" * @brief The min value of e value. (dimension 1)              ";...
" * @brief The max value of e value. (dimension 1)              ";...
" * @brief The min value of ec value. (dimension 2)             ";...
" * @brief The max value of ec value. (dimension 2)             ";...
];

fprintf(fs, "%s\r\n%s\r\n%s\r\n",info_src2(1),info_src2(2),info_src2(3));
fprintf(fs, "uint32_t %s_dim1_size = %d;\r\n\r\n", fuzzy_mat_name ,fuzzy_mat_size(1));

fprintf(fs, "%s\r\n%s\r\n%s\r\n",info_src2(1),info_src2(4),info_src2(3));
fprintf(fs, "uint32_t %s_dim2_size = %d;\r\n\r\n", fuzzy_mat_name ,fuzzy_mat_size(2));

fprintf(fs, "%s\r\n%s\r\n%s\r\n",info_src2(1),info_src2(5),info_src2(3));
fprintf(fs, "ctrl_gt %s_dim1_min = float2ctrl(%.6f);\r\n\r\n", fuzzy_mat_name ,dim1_mesh(1));

fprintf(fs, "%s\r\n%s\r\n%s\r\n",info_src2(1),info_src2(6),info_src2(3));
fprintf(fs, "ctrl_gt %s_dim1_max = float2ctrl(%.6f);\r\n\r\n", fuzzy_mat_name ,dim1_mesh(fuzzy_mat_size(1)));

fprintf(fs, "%s\r\n%s\r\n%s\r\n",info_src2(1),info_src2(7),info_src2(3));
fprintf(fs, "ctrl_gt %s_dim2_min = float2ctrl(%.6f);\r\n\r\n", fuzzy_mat_name ,dim2_mesh(1));

fprintf(fs, "%s\r\n%s\r\n%s\r\n",info_src2(1),info_src2(8),info_src2(3));
fprintf(fs, "ctrl_gt %s_dim2_max = float2ctrl(%.6f);\r\n", fuzzy_mat_name ,dim2_mesh(fuzzy_mat_size(2)));

fprintf(fs, "\r\n\r\n");

%% generate init function

info_src3 = [ ...
"/**                                                                                     ";...
" * @brief Initializes a specific FLC instance with the 'type1' fuzzy data.              ";...
" * @ingroup fuzzy_logic_controller                                                      ";...
" *                                                                                      ";...
" * @param[out] flc Pointer to the FLC instance to be initialized.                       ";...
" * @param[in] gain_e The gain for the 'Error' input.                                    ";...
" * @param[in] gain_ec The gain for the 'Error Rate' input.                              ";...
" * @param[in] gain_u The gain for the final control output.                             ";...
" *                                                                                      ";...
" * @details This is a convenience wrapper function that calls the generic `flc_init`    ";...
" * function, passing the specific 'type1' fuzzy data defined in this file.              ";...
" * It simplifies the setup process for a controller that uses this particular surface.  ";...
" */                                                                                     ";...   
];

for i=1:13
    fprintf(fs, "%s\r\n", info_src3(i));
end


%% generate init function definition

fprintf(fs, "void ctl_init_flc_%s(flc_controller_t* flc, ctrl_gt gain_e, ctrl_gt gain_ec, ctrl_gt gain_u)\r\n{\r\n", fuzzy_mat_name);
fprintf(fs, "\tctl_init_flc(flc,\r\n\t\t// error\r\n");
fprintf(fs, "\t\t%s_dim1_min, %s_dim1_max, %s_dim1_size,\r\n", fuzzy_mat_name, fuzzy_mat_name, fuzzy_mat_name);
fprintf(fs, "\t\t// error rate\r\n");
fprintf(fs, "\t\t%s_dim2_min, %s_dim2_max, %s_dim2_size,\r\n", fuzzy_mat_name, fuzzy_mat_name, fuzzy_mat_name);
fprintf(fs, "\t\t// fuzzy matrix\r\n");
fprintf(fs, "\t\t%s_matrix,\r\n", fuzzy_mat_name);
fprintf(fs, "\t\t// gain \r\n\t\tgain_e, gain_ec, gain_u\r\n\t);\r\n}");

fprintf(fs, "\r\n\r\n");

fprintf(fs, "that's all");

fclose(fs);

%% generate headere file

% necessary fuzzy header head
fprintf(fh,"#ifndef _FILE_%s_H_\r\n", upper(target_file));
fprintf(fh, "#define _FILE_%s_H_\r\n", upper(target_file));
fprintf(fh, "\r\n\r\n");
fprintf(fh, "#ifdef __cplusplus\r\n");
fprintf(fh, 'extern"C"\r\n');
fprintf(fh, "{\r\n");
fprintf(fh, "#endif // __cplusplus\r\n\r\n\r\n");

% variable declaration in header file
fprintf(fh, "// Here's the fuzzy matrix declaration.\r\n");
fprintf(fh, "extern %s %s_matrix [%d][%d];\r\n\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1), fuzzy_mat_size(2));

fprintf(fh, "extern %s %s_segment1[%d];\r\n\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1));

fprintf(fh, "extern %s %s_segment2[%d];\r\n\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(2));


fprintf(fh, "extern uint32_t %s_dim2_size;\r\n", fuzzy_mat_name);
fprintf(fh, "extern uint32_t %s_dim2_size;\r\n", fuzzy_mat_name);
fprintf(fh, "extern ctrl_gt  %s_dim1_min ;\r\n", fuzzy_mat_name);
fprintf(fh, "extern ctrl_gt  %s_dim1_max ;\r\n", fuzzy_mat_name);
fprintf(fh, "extern ctrl_gt  %s_dim2_min ;\r\n", fuzzy_mat_name);
fprintf(fh, "extern ctrl_gt  %s_dim2_max ;\r\n", fuzzy_mat_name);



% function stops here.
fprintf(fh, "}\r\n\r\n");

% necessary fuzzy header ending
fprintf(fh, "#ifdef __cplusplus\r\n");
fprintf(fh, "}\r\n");
fprintf(fh, "#endif // __cplusplus\r\n\r\n");
fprintf(fh,"#endif // _FILE_%s_H_\r\n\r\n", upper(target_file));

fclose(fh);


end
