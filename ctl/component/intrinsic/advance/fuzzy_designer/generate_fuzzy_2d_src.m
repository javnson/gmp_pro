% This file generate a header file

% target_file is target source file and header file name, without suffix.
% fuzzy_mat_name will define the name of source code matrix.
% fuzzy_2d_mat give the souce fuzzy 2D matrix content.


function generate_fuzzy_2d_src(target_file, fuzzy_mat_name, ...
    fuzzy_2d_mat, dim1_mesh, dim2_mesh)

% config setting 
type_name = "ctrl_gt";

header_file = strcat(target_file, ".h");
source_file = strcat(target_file, ".c");

fs = fopen(source_file, "w+");
fh = fopen(header_file, "w+");

% generate information about the file
info = [...
    "// GMP fizzy header generator."; ...
    "// "; ... 
    "// This file is generated by fuzzy controller header generator."; ...
    "// This file should not be changed you should run `generate_header_file` script to get this file."; ...
    "// This file may prvide a variable name given by the script parameter."];

fprintf(fs,"%s\r\n%s\r\n%s\r\n%s\r\n%s\r\n\r\n", ...
    info(1), info(2), info(3),info(4),info(5));
fprintf(fh,"%s\r\n%s\r\n%s\r\n%s\r\n%s\r\n\r\n", ...
    info(1), info(2), info(3),info(4),info(5));

fuzzy_mat_size = size(fuzzy_2d_mat);

% create fuzzy matrix
fprintf(fs, "// fuzzy matrix content\r\n");
fprintf(fs, "%s %s [%d][%d] = {\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1), fuzzy_mat_size(2));

% generate fuzzy matrix content
for i = 1:fuzzy_mat_size(1)
    for j = 1:fuzzy_mat_size(2)
        if(j == 1)
            fprintf(fs, "\t{float2ctrl(%.6f)",fuzzy_2d_mat(i,j));
        else
            fprintf(fs, " ,float2ctrl(%.6f)",fuzzy_2d_mat(i,j));
        end
    end
    fprintf(fs, "},\r\n");
end
fprintf(fs, "};");
fprintf(fs, "\r\n\r\n");

% generate fuzzy variables
fprintf(fs, "// fuzzy variable1 mesh\r\n");
fprintf(fs, "%s %s_segment1[%d] = \r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1));
for i = 1:fuzzy_mat_size(1)
    if(i == 1)
            fprintf(fs, "\t{float2ctrl(%.6f)", dim1_mesh(i));
    else
            fprintf(fs, " ,float2ctrl(%.6f)", dim1_mesh(i));
    end
end
fprintf(fs, "};\r\n\r\n");

% generate fuzzy variables
fprintf(fs, "// fuzzy variable2 mesh\r\n");
fprintf(fs, "%s %s_segment2[%d] = \r\n", ...
    type_name,fuzzy_mat_name, fuzzy_mat_size(2));
for i = 1:fuzzy_mat_size(2)
    if(i == 1)
            fprintf(fs, "\t{float2ctrl(%.6f)", dim1_mesh(i));
    else
            fprintf(fs, " ,float2ctrl(%.6f)", dim1_mesh(i));
    end
end
fprintf(fs, "};\r\n\r\n");



% necessary fuzzy header head
fprintf(fh,"#ifndef _FILE_%s_H_\r\n", upper(target_file));
fprintf(fh, "#define _FILE_%s_H_\r\n", upper(target_file));
fprintf(fh, "\r\n\r\n");
fprintf(fh, "#ifdef __cplusplus\r\n");
fprintf(fh, 'extern"C"\r\n');
fprintf(fh, "{\r\n");
fprintf(fh, "#endif // __cplusplus\r\n\r\n\r\n");

% variable declaration in header file
fprintf(fh, "// Here's the fuzzy matrix declaration.\r\n");
fprintf(fh, "extern %s %s [%d][%d];\r\n\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1), fuzzy_mat_size(2));

fprintf(fh, "extern %s %s_segment1[%d];\r\n\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(1));

fprintf(fh, "extern %s %s_segment2[%d];\r\n\r\n", ...
    type_name, fuzzy_mat_name, fuzzy_mat_size(2));


% function definition header
fprintf(fh, "// Here's the fuzzy calculate function definition.\r\n");
fprintf(fh, "GMP_STATIC_INLINE\r\n");
fprintf(fh, "%s ctl_step_%s(%s input1, %s input2)\r\n", ...
    type_name, fuzzy_mat_name, type_name, type_name);
fprintf(fh, "{\r\n");
fprintf(fh, "\tsize_gt i = 0, j = 0;\r\n\r\n");

% for loop starts here
fprintf(fh, "\tfor(i = 0; i < %d; ++i)\r\n", fuzzy_mat_size(1));
fprintf(fh,"\t{\r\n");
for i = 1:fuzzy_mat_size(1)

    for j = 1:fuzzy_mat_size(2)
        if(j == 1)
            fprintf(fs, "if (input1 < ) ",fuzzy_2d_mat(i,j));
        else
            fprintf(fs, " ,%.6f",fuzzy_2d_mat(i,j));
        end
    end
   
end

fprintf(fs, "\t}\r\n");

% function stops here.
fprintf(fh, "}\r\n\r\n");

% necessary fuzzy header ending
fprintf(fh, "#ifdef __cplusplus\r\n");
fprintf(fh, "}\r\n");
fprintf(fh, "#endif // __cplusplus\r\n\r\n");
fprintf(fh,"#endif // _FILE_%s_H_\r\n\r\n", upper(target_file));

fclose(fh);
fclose(fs);

end
